{
	"info": {
		"_postman_id": "5886def0-157d-4c1a-bb2c-2862582f7d07",
		"name": "Group_29_1_NaumenkoAnna",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Request_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);          //Статус код 200\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007//first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"",
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () { //Статус код 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json(); //Спарсить response body в json.\r",
							"\r",
							"\r",
							"\r",
							"let name = \"Anna\";                        //Проверить, что name в ответе равно name s request\r",
							"pm.test(\"Check name\", function () {            //name вбить руками\r",
							"  \r",
							"    pm.expect(jsonData.name).to.eql(name);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let age = \"30\"\r",
							"pm.test(\"Check age\", function () {    //Проверить, что age в ответе равно age s request, \r",
							"                                              //age вбить руками\r",
							"    pm.expect(jsonData.age).to.eql(age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let salary = 2400\r",
							"pm.test(\"Check salary\", function () {\r",
							"                                                 //Проверить, что salary в ответе равно salary s request, salary вбить руками.\r",
							"    pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let req = pm.request.url.query.all()   //Спарсить request.               \r",
							"\r",
							"\r",
							"let reqName = pm.request.url.query.get(\"name\")\r",
							"pm.test(\"Check name2\", function () {        //Проверить, что name в ответе равно name        \r",
							"                                             //request (name забрать из request.)\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let reqAge = pm.request.url.query.get(\"age\")\r",
							"pm.test(\"Check age2\", function () {            //Проверить, что age в ответе равно \r",
							"                                              //age s request (age забрать из request.)\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"pm.test(\"Check salary2\", function () {                //Проверить, что salary в ответе равно\r",
							"                                                      // salary s request (salary забрать из request.)\r",
							"    pm.expect(jsonData.salary).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"console.log(jsonData.family); //Вывести в консоль параметр family из response.\r",
							"\r",
							"\r",
							"\r",
							"let reqSalary4 = reqSalary * 4\r",
							"pm.test(\"Check salary3\", function () {    \r",
							"  \r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqSalary4);\r",
							"});\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Anna&age=30&salary=2400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);          //Статус код 200\r",
							"});\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json(); // Спарсить response body в json.\r",
							"let req = pm.request.url.query.all(); //Спарсить request.\r",
							"\r",
							"\r",
							"\r",
							"let reqName = pm.request.url.query.get(\"name\")\r",
							"pm.test(\"Check name\", function () {\r",
							"                                                   //Проверить, что name в ответе равно name s request\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let reqAge = pm.request.url.query.get(\"age\")\r",
							"pm.test(\"Check age\", function () {\r",
							"                                              //Проверить, что age в ответе равно age s request \r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"pm.test(\"Check salary\", function () {\r",
							"                                                   //Проверить, что salary в ответе равно salary s request\r",
							"    pm.expect(jsonData.salary).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"console.log(jsonData.family); //Вывести в консоль параметр family из response.\r",
							"\r",
							"\r",
							"pm.test(\"Check dogName\", function () {\r",
							"\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"    \r",
							"}) //Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check dogAge\", function () {\r",
							"\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"    \r",
							"})  //Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check dogNameLuky\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\"); //Проверить, что параметр name имеет значение Luky.\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check dogAge4\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);   // Проверить, что параметр age имеет значение 4.\r",
							"});\r",
							"\r",
							"  \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Anna&age=30&salary=2400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);         //Статус код 200\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json(); //Спарсить response body в json.\r",
							"let req = pm.request.url.query.all(); //Спарсить request.\r",
							"\r",
							"\r",
							"\r",
							"let reqName = pm.request.url.query.get(\"name\");\r",
							"pm.test(\"Check name\", function () {             //Проверить, что name в ответе равно name s request\r",
							"  \r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let reqAge = pm.request.url.query.get(\"age\")\r",
							"pm.test(\"Check age\", function () {             //Проверить, что age в ответе равно age из request\r",
							"  \r",
							"    pm.expect(jsonData.age).to.eql(+reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"console.log(jsonData.salary);  // Вывести в консоль параметр salary из request.\r",
							"console.log(pm.request.url.query.get(\"salary\"));  //Вывести в консоль параметр salary из response\r",
							"console.log(jsonData.salary[0]); //Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[1]); //Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[2]); // Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"\r",
							"\r",
							"let reqSalary = pm.request.url.query.get(\"salary\");\r",
							"pm.test(\"Check salary\", function () {\r",
							"                                                      //Проверить, что 0-й элемент параметра salary равен salary из request \r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let salary1 = jsonData.salary[1];\r",
							"pm.test(\"Check salary2\", function () {\r",
							"                                                 //Проверить, что 1-й элемент параметра salary равен salary*2 из request\r",
							"    pm.expect(+salary1).to.eql(reqSalary * 2);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let salary2 = jsonData.salary[2];\r",
							"pm.test(\"Check salary3\", function () {\r",
							"                                                  //Проверить, что 2-й элемент параметра salary равен salary*3 из request\r",
							"    pm.expect(+salary2).to.eql(reqSalary * 3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"for (let allSalary of jsonData.salary){\r",
							"                    //Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"    console.log(allSalary)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Anna&age=30&salary=6720",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "6720"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});                                           //Статус код 200\r",
							"\r",
							"\r",
							" let jsonData = pm.response.json();  //Спарсить response body в json.\r",
							" let req = request.data;             // Спарсить request.\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"    \r",
							"})  //json response имеет параметр start_qa_salary\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"    \r",
							"})//json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"    \r",
							"}) //json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check qa_salary_after_1_5_year\", function () {\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"    \r",
							"}) //json response имеет параметр qa_salary_after_1.5_years\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check qa_salary_after_3_5_year\", function () {\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"    \r",
							"})//json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"person\", function () {\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"    \r",
							"})                     //json response имеет параметр person\r",
							"\r",
							"\r",
							"\r",
							"let reqSalary = request.data.salary\r",
							"pm.test(\"Check salary\", function () {\r",
							"                                                               //параметр start_qa_salary равен salary из request\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check salary2\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqSalary * 2); //параметр qa_salary_after_6_months равен salary*2   \r",
							"});                                                                        // из request\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check salary3\", function () {                        //параметр qa_salary_after_12_months равен salary*2.7 из request\r",
							"  \r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqSalary * 2.7);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check salary4\", function () {                     //параметр qa_salary_after_1.5_year равен salary*3.3 из request\r",
							"  \r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+reqSalary * 3.3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check salary5\", function () {                   //параметр qa_salary_after_3.5_years равен salary*3.8 из request \r",
							"  \r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+reqSalary * 3.8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check person\", function () {       //в параметре person, 1-й элемент из u_name равен salary из request\r",
							"  \r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let reqAge = request.data.age                               //параметр u_age равен age из request\r",
							"pm.test(\"Check person1\", function () {        \r",
							"  \r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check person2\", function () {                    //параметр u_salary_5_years равен salary*4.2 из request\r",
							"  \r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqSalary * 4.2);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"for (let allPerson in jsonData.person){      \r",
							"   \r",
							"    console.log(\"key:\" + allPerson + \", value: \" + jsonData.person[allPerson])\r",
							"}\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}